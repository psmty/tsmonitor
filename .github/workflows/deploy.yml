name: Deploy to Server

on:
  workflow_dispatch:

env:
  PATH_FILE:  /usr/local/tsmonitor
jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up environment variables
        env:
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          AUTH_TRUST_HOST: ${{ secrets.AUTH_TRUST_HOST }}
          MS_CLIENT_ID: ${{ secrets.MS_CLIENT_ID }}
          MS_CLIENT_SECRET: ${{ secrets.MS_CLIENT_SECRET }}
          MS_TENANT_ID: ${{ secrets.MS_TENANT_ID }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_USER_EMAIL: ${{ secrets.POSTGRES_USER_EMAIL }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          RESOURCES_CF_VALS: ${{ vars.RESOURCES_CF_VALS }}
          SKIP_AUTH: ${{ vars.SKIP_AUTH }}
        run: |
          # Create .env file with environment variables in ${{ env.PATH_FILE}}
          bash -c 'cat << EOF > ${{ env.PATH_FILE}}/.env
          AUTH_SECRET=${AUTH_SECRET}
          AUTH_TRUST_HOST=${AUTH_TRUST_HOST}
          MS_CLIENT_ID=${MS_CLIENT_ID}
          MS_CLIENT_SECRET=${MS_CLIENT_SECRET}
          MS_TENANT_ID=${MS_TENANT_ID}
          POSTGRES_USER=${POSTGRES_USER}
          POSTGRES_USER_EMAIL=${POSTGRES_USER_EMAIL}
          POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
          POSTGRES_DB=${POSTGRES_DB}
          POSTGRES_PORT=${POSTGRES_PORT}
          POSTGRES_HOST=${POSTGRES_HOST}
          RESOURCES_CF_VALS=${RESOURCES_CF_VALS}
          EOF'

      - name: Copy Docker Compose
        run: |
          cp docker-compose.yml ${{ env.PATH_FILE}}/docker-compose.yml
          cp -R migrations ${{ env.PATH_FILE }}

      - name: Restart Docker Compose services
        working-directory: ${{ env.PATH_FILE}}
        run: |
          newgrp docker
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker image prune -f

